#! /usr/bin/env bash
#
# ssl/bin/build
#
# raymondstrose@hotmail.com
#
#   Setup an SSL CA container.
#

append () { sed -e "s?\$?$@?"; }
prepend () { sed -e "s?^?$@?"; }
indent () { { if [ $# -ne 0 ]; then echo -e "$@"; else cat; fi; } | prepend "    "; }
error () { { if [ $# -ne 0 ]; then echo -e "$@"; else cat; fi; } | prepend "$PROGNAME: error: " >&2; }
warning () { { if [ $# -ne 0 ]; then echo -e "$@"; else cat; fi; } | prepend "$PROGNAME: warning: " >&2; }
notice () { { if [ $# -ne 0 ]; then echo -e "$@"; else cat; fi; } | prepend "$PROGNAME: notice: " >&2; }
info () { { if [ $# -ne 0 ]; then echo -e "$@"; else cat; fi; } | prepend "$PROGNAME: info: " >&2; }
verbose () { $VERBOSE_MODE && { { if [ $# -ne 0 ]; then echo -e "$@"; else cat; fi; } | prepend "$PROGNAME: verbose: " >&2; } }
debug () { $DEBUG_MODE && { { if [ $# -ne 0 ]; then echo -e "$@"; else cat; fi; } | prepend "$PROGNAME: debug: " >&2; } }

function execute ()
{
    declare -a params;

    for param; do
        if [[ -z "${param}" || "${param}" =~ [^A-Za-z0-9_@%+=:,./-] ]]; then
            params+=("'${param//\'/\'\"\'\"\'}'");
        else
            params+=("${param}");
        fi;
    done;

    debug "${params[*]}";
    eval ${params[*]};
}

main ()
{
# Display usage information.
#
    usage ()
    {
        cat <<-EOF >&2
			$PROGNAME: usage: $PROGNAME [--help] [--debug] [--verbose] [--noop] [--config-dir {path}] [--image-name {name}] [--image-tag {tag}]

			--image-name {name}         Specify the Docker image tag (default: $DOCKER_IMAGE_NAME)
			--image-tag {tag}           Specify the Docker image tag (default: $DOCKER_IMAGE_TAG)
			--config-dir {path}         Specify the configuration directory (default: $CONFIG_DIR)
			--noop                      Don't perform the operation, just report the actions that would be carried out.
			--verbose                   Enable verbose mode.
			--debug                     Enable debug mode.
			--help                      Display this usage information.
			EOF

        return 0;
    }

# Load configuration files.
#
	load_config ()
	{
		if [ "$CONFIG_DIR" ]; then
			if [ -d "$CONFIG_DIR" ]; then

			# Configure the process
			#
				notice "Loading configuration.";
				for filename in $CONFIG_DIR/*; do
					indent "$filename" | debug;
					[ -f "$filename" ] && { source "$filename" || return 1; }
				done;
			fi;
		fi;

		return 0;
	}

	repo_setup ()
	{
		case $(uname -m) in
		x86_64)
			cat <<-EOF
				deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable
				EOF
			;;
		arm64)
			cat <<-EOF
				deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable
				EOF
			;;
		esac;
	}

    export PROGNAME=`basename "$0"`;
    export PROGDIR=`dirname "$0"`;
    export INSTALL_DIR=`dirname "$PROGDIR"`;
    export CONFIG_DIR="$INSTALL_DIR/etc/$PROGNAME";
    export LIB_DIR="$INSTALL_DIR/lib/$PROGNAME";
    export WORK_DIR="$INSTALL_DIR/var/$PROGNAME";
    export DEBUG_MODE=false;
    export VERBOSE_MODE=false;
    export NOOP_MODE=false;
	export DOCKER_IMAGE_NAME="raymondstrose/ssl";
	export DOCKER_IMAGE_TAG="0.0.1";
	export DOCKER_ARCH="amd64";
	export JAVA_VERSION="11";

# NOTE: This returns "aarch64" on Ubuntu. But, "arm64" on macOS.
	TARGET_ARCH="$(uname -m)";

	case "$TARGET_ARCH" in
	aarch64)	TARGET_ARCH="arm64";
				DOCKER_ARCH="arm64";;
	x86_64)		DOCKER_ARCH="amd64";;
	arm64)		DOCKER_ARCH="arm64";;
	esac;

# Load the default configuration files.
	load_config || return $?;

    while [ $# -gt 0 ]; do
        case "$1" in
        --image-tag|--image-tag=?*)
            case "$1" in
            --image-tag)	DOCKER_IMAGE_TAG="$2"; shift;;
            --image-tag=?*)	DOCKER_IMAGE_TAG="${1#--image-tag=}";;
            esac;;
        --image-name|--image-name=?*)
            case "$1" in
            --image-name)		DOCKER_IMAGE_NAME="$2"; shift;;
            --image-name=?*)	DOCKER_IMAGE_NAME="${1#--image-name=}";;
            esac;;
        --config-dir|--config-dir=?*)
            case "$1" in
            --config-dir)		CONFIG_DIR="$2"; shift;;
            --config-dir=?*)	CONFIG_DIR="${1#--config-dir=}";;
            esac;

		# Load the specified configuration files.
			load_config || return $?;;
        --debug)	$DEBUG_MODE && set -x; DEBUG_MODE=true;;
        --noop)		NOOP_MODE=true;;
        --verbose)	VERBOSE_MODE=true;;
        --help) usage; return 2;;
        --) shift; break;;
        -*)	error "unknown option \"$1\""; usage; return 1;;
        *)	error "unrecognised command line argument \"$1\""; usage; return 1;;
        esac;

        shift;
    done;

	#TARGET_VERSION="${DOCKER_IMAGE_TAG}-$TARGET_ARCH";
	TARGET_VERSION="${DOCKER_IMAGE_TAG}";
	DST_IMAGE="raymondstrose/ssl:$TARGET_VERSION";

	execute docker build -f Dockerfile -t "$DST_IMAGE" .;

	if [ $? -ne 0 ]; then
		error "Failed to build $DST_IMAGE";
		return 1;
	fi;

	execute docker push $DST_IMAGE;

	if [ $? -ne 0 ]; then
		error "Failed to push $DST_IMAGE";
		return 1;
	fi;

	return 0;
}

	main "$@";

